name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: ncsoccer-scraper
  TF_STATE_BUCKET: ncsh-terraform-state
  ENVIRONMENT: dev

jobs:
  build-infrastructure:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: dev
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        audience: sts.amazonaws.com
        role-session-name: GitHubActions-Deploy

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"

    # Infrastructure Terraform
    - name: Terraform Init (Infrastructure)
      working-directory: ./terraform/infrastructure
      run: |
        terraform init \
          -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
          -backend-config="key=infrastructure/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"
      env:
        TF_VAR_aws_region: ${{ env.AWS_REGION }}

    - name: Terraform Plan (Infrastructure)
      working-directory: ./terraform/infrastructure
      run: terraform plan -input=false -out=tfplan
      env:
        TF_VAR_aws_region: ${{ env.AWS_REGION }}

    - name: Terraform Apply (Infrastructure)
      if: github.ref == 'refs/heads/main'
      working-directory: ./terraform/infrastructure
      run: terraform apply -auto-approve tfplan

  build-service:
    needs: build-infrastructure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: dev
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"

    - name: Terraform Init (App)
      working-directory: ./terraform/app
      run: |
        terraform init \
          -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
          -backend-config="key=app/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"
      env:
        TF_VAR_aws_region: ${{ env.AWS_REGION }}

    - name: Terraform Plan (App)
      working-directory: ./terraform/app
      run: terraform plan -input=false -out=tfplan
      env:
        TF_VAR_aws_region: ${{ env.AWS_REGION }}
        TF_VAR_github_repo: ${{ github.repository }}
        TF_VAR_ecr_repository_name: ${{ env.ECR_REPOSITORY }}
        TF_VAR_tf_state_bucket: ${{ env.TF_STATE_BUCKET }}
        TF_VAR_data_bucket_name: ${{ secrets.DATA_BUCKET_NAME }}

    - name: Terraform Apply (App)
      if: github.ref == 'refs/heads/main'
      working-directory: ./terraform/app
      run: terraform apply -auto-approve tfplan
      env:
        TF_VAR_aws_region: ${{ env.AWS_REGION }}
        TF_VAR_github_repo: ${{ github.repository }}
        TF_VAR_ecr_repository_name: ${{ env.ECR_REPOSITORY }}
        TF_VAR_tf_state_bucket: ${{ env.TF_STATE_BUCKET }}
        TF_VAR_data_bucket_name: ${{ secrets.DATA_BUCKET_NAME }}