name: Build and Deploy

on:
  workflow_dispatch:
  pull_request:
    branches: [main]
    paths:
      - 'CHANGELOG.md'
  push:
    branches: [main]
    paths:
      - 'CHANGELOG.md'

env:
  AWS_REGION: us-east-2
  SCRAPER_REPOSITORY: ncsoccer-scraper
  PROCESSING_REPOSITORY: ncsoccer-processing
  ENVIRONMENT: dev

jobs:
  validate-changes:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for valid CHANGELOG update
        id: check
        run: |
          git diff --name-only HEAD^ HEAD > changes.txt
          echo "Changes detected:"
          cat changes.txt

          # Check if CHANGELOG.md was modified and contains a new version entry
          if grep -q '^CHANGELOG.md$' changes.txt; then
            DIFF=$(git diff HEAD^ HEAD -- CHANGELOG.md)
            if echo "$DIFF" | grep -q '^\+## \[[0-9]\+\.[0-9]\+\.[0-9]\+\]'; then
              echo "Valid version update detected in CHANGELOG.md"
              echo "should_run=true" >> $GITHUB_OUTPUT
            else
              echo "CHANGELOG.md modified but no new version entry found"
              echo "should_run=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "CHANGELOG.md not modified"
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

  build-scraper:
    needs: [validate-changes]
    # Only build on main branch push or manual trigger
    if: (needs.validate-changes.outputs.should_run == 'true' && github.event_name == 'push') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: dev
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/${{ env.SCRAPER_REPOSITORY }}:$IMAGE_TAG -f scraping/Dockerfile scraping/
        docker tag $ECR_REGISTRY/${{ env.SCRAPER_REPOSITORY }}:$IMAGE_TAG $ECR_REGISTRY/${{ env.SCRAPER_REPOSITORY }}:latest
        docker push $ECR_REGISTRY/${{ env.SCRAPER_REPOSITORY }}:$IMAGE_TAG
        docker push $ECR_REGISTRY/${{ env.SCRAPER_REPOSITORY }}:latest

    - name: Update Lambda Function
      run: |
        aws lambda update-function-code \
          --function-name ncsoccer_scraper \
          --image-uri ${{ steps.login-ecr.outputs.registry }}/${{ env.SCRAPER_REPOSITORY }}:${{ github.sha }}

  build-processing:
    needs: [validate-changes]
    # Only build on main branch push or manual trigger
    if: (needs.validate-changes.outputs.should_run == 'true' && github.event_name == 'push') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: dev
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/${{ env.PROCESSING_REPOSITORY }}:$IMAGE_TAG -f processing/Dockerfile processing/
        docker tag $ECR_REGISTRY/${{ env.PROCESSING_REPOSITORY }}:$IMAGE_TAG $ECR_REGISTRY/${{ env.PROCESSING_REPOSITORY }}:latest
        docker push $ECR_REGISTRY/${{ env.PROCESSING_REPOSITORY }}:$IMAGE_TAG
        docker push $ECR_REGISTRY/${{ env.PROCESSING_REPOSITORY }}:latest

    - name: Update Lambda Function
      run: |
        aws lambda update-function-code \
          --function-name ncsoccer-processing \
          --image-uri ${{ steps.login-ecr.outputs.registry }}/${{ env.PROCESSING_REPOSITORY }}:${{ github.sha }}