{
  "Comment": "Soccer Analysis Pipeline",
  "StartAt": "ProcessQuery",
  "States": {
    "ProcessQuery": {
      "Type": "Task",
      "Resource": "${AnalysisLambdaArn}",
      "Parameters": {
        "step": "query",
        "prompt.$": "$.prompt",
        "compute_iterations.$": "$.compute_iterations"
      },
      "Retry": [
        {
          "ErrorEquals": ["States.TaskFailed"],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2.0
        }
      ],
      "Next": "FormatResult",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "HandleError"
        }
      ]
    },
    "FormatResult": {
      "Type": "Task",
      "Resource": "${AnalysisLambdaArn}",
      "Parameters": {
        "step": "format",
        "prompt.$": "$.prompt",
        "result.$": "$.result",
        "format_type.$": "$.format_type"
      },
      "Retry": [
        {
          "ErrorEquals": ["States.TaskFailed"],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2.0
        }
      ],
      "Next": "SendResponse",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "HandleError"
        }
      ]
    },
    "SendResponse": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.mode",
          "StringEquals": "stream",
          "Next": "SendWebSocketResponse"
        }
      ],
      "Default": "ReturnSyncResponse"
    },
    "SendWebSocketResponse": {
      "Type": "Task",
      "Resource": "${AnalysisLambdaArn}",
      "Parameters": {
        "step": "send_response",
        "connection_id.$": "$.connection_id",
        "endpoint_url.$": "$.endpoint_url",
        "result.$": "$.result"
      },
      "End": true
    },
    "ReturnSyncResponse": {
      "Type": "Pass",
      "End": true,
      "Parameters": {
        "statusCode": 200,
        "body.$": "States.JsonToString($.result)"
      }
    },
    "HandleError": {
      "Type": "Pass",
      "End": true,
      "Parameters": {
        "statusCode": 500,
        "body": {
          "error.$": "$.Error",
          "cause.$": "$.Cause"
        }
      }
    }
  }
}